`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: VADECON
// Engineer: Karthik R
// 
// Create Date: 30.03.2024 17:25:38
// Design Name: 
// Module Name: ahb_slave_yt
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module ahb_slave_yt(
input hclk,
input hresetn,
input hsel,
input [31:0]haddr,
input hwrite,
input[2:0]hsize,
input[2:0]hburst,
input[3:0]hprot,
input[1:0]htrans,
input hmastlock,
input[31:0]hwdata,
input hready,
output reg hreadyout,
output reg hresp,
output reg [31:0] hrdata
);

reg[31:0]mem_arr[31:0];
reg[4:0]waddr;
reg[4:0]raddr;
reg[1:0]presentstate;
reg[1:0]nextstate;
parameter idle = 2'b00;
parameter s1 = 2'b01;
parameter s2 = 2'b10;
parameter s3 = 2'b11;

reg single_flag;
reg incr_flag;
reg incr4_flag;
reg incr8_flag;

reg wrap4_flag;
reg wrap8_flag;
reg incr16_flag;
reg wrap16_flag;

always@(posedge clk)
begin
if(!hresetn)
    begin
    state<=idle;
    end
else
    begin
    state<=nextstate;
    end
end

always@(posedge clk)
begin
case(presentstate)

idle : begin
          single_flag=1'b0;
          incr_flag=1'b0;
          wrap4_flag=1'b0;
          wrap8_flag=1'b0;
          wrap16_flag=1'b0;
          incr4_flag=1'b0;
          incr16_flag=1'b0;
          if(hsel==1'b1)
            begin
            nextstate=s1;
            end
          else
            begin
            nextstate=idle;
            end
          end
          
  s1 : begin
          case(hburst)
          //single burst transfer
          3'b000 : begin
                         single_flag=1'b0;
                         incr_flag=1'b0;
                         wrap4_flag=1'b0;
                         wrap8_flag=1'b0;
                         wrap16_flag=1'b0;
                         incr4_flag=1'b0;
                         incr16_flag=1'b0;
                         end
                         
          3'b001 : begin
                         single_flag=1'b0;
                         incr_flag=1'b1;
                         wrap4_flag=1'b0;
                         wrap8_flag=1'b0;
                         wrap16_flag=1'b0;
                         incr4_flag=1'b0;
                         incr8_flag=1'b0;
                         incr16_flag=1'b0;
                         end
                      
          
          3'b010 : begin
                         single_flag=1'b0;
                         incr_flag=1'b0;
                         wrap4_flag=1'b1;
                         wrap8_flag=1'b0;
                         wrap16_flag=1'b0;
                         incr4_flag=1'b0;
                         incr16_flag=1'b0;
                         incr8_flag=1'b0;
                         end
                         
          3'b011 : begin
                         single_flag=1'b0;
                         incr_flag=1'b0;
                         wrap4_flag=1'b0;
                         wrap8_flag=1'b0;
                         wrap16_flag=1'b0;
                         incr4_flag=1'b1;
                         incr16_flag=1'b0;
                         incr8_flag=1'b0;
                         end
                         
  3'b100 : begin
                         single_flag=1'b0;
                         incr_flag=1'b0;
                         wrap4_flag=1'b0;
                         wrap8_flag=1'b1;
                         wrap16_flag=1'b0;
                         incr4_flag=1'b0;
                         incr16_flag=1'b0;
                         incr8_flag=1'b0;
                         end
                         
3'b101 : begin
                         single_flag=1'b0;
                         incr_flag=1'b0;
                         wrap4_flag=1'b0;
                         wrap8_flag=1'b0;
                         wrap16_flag=1'b0;
                         incr4_flag=1'b0;
                         incr16_flag=1'b0;
                         incr8_flag=1'b1;
                         end
                         
3'b110 : begin
                         single_flag=1'b0;
                         incr_flag=1'b0;
                         wrap4_flag=1'b0;
                         wrap8_flag=1'b0;
                         wrap16_flag=1'b1;
                         incr4_flag=1'b0;
                         incr16_flag=1'b0;
                         incr8_flag=1'b1;
                         end
3'b111 : begin
                         single_flag=1'b0;
                         incr_flag=1'b0;
                         wrap4_flag=1'b0;
                         wrap8_flag=1'b0;
                         wrap16_flag=1'b0;
                         incr4_flag=1'b0;
                         incr16_flag=1'b1;
                         incr8_flag=1'b0;
                         end
                         
default: begin
             single_flag=1'b0;
                         incr_flag=1'b0;
                         wrap4_flag=1'b0;
                         wrap8_flag=1'b0;
                         wrap16_flag=1'b0;
                         incr4_flag=1'b0;
                         incr16_flag=1'b0;
                         incr8_flag=1'b0;
           end
 endcase
 if((hwrite==1'b1)&&(hready==1'b1))
 begin
 nextstate=s2;
 end
 else if((hwrite==1'b0)&&(hready==1'b1))
 begin
 
 
